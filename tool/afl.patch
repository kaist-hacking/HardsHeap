diff --git afl-fuzz.c afl-fuzz.c
index 01b4afe..522247e 100644
--- afl-fuzz.c
+++ afl-fuzz.c
@@ -45,6 +45,7 @@
 #include <termios.h>
 #include <dlfcn.h>
 #include <sched.h>
+#include <assert.h>
 
 #include <sys/wait.h>
 #include <sys/time.h>
@@ -79,6 +80,8 @@
 /* Lots of globals, but mostly for the status UI and other things where it
    really makes no sense to haul them around as function parameters. */
 
+#define CONFIRM_NUM 16
+
 
 EXP_ST u8 *in_dir,                    /* Input directory with test cases  */
           *out_file,                  /* File to fuzz, if any             */
@@ -98,12 +101,17 @@ EXP_ST u64 mem_limit  = MEM_LIMIT;    /* Memory cap for child (MB)        */
 
 static u32 stats_update_freq = 1;     /* Stats update frequency (execs)   */
 
-EXP_ST u8  skip_deterministic,        /* Skip deterministic stages?       */
+// HEAP
+u8         confirm_mode;
+
+// HEAP: No deterministic step..
+EXP_ST u8  skip_deterministic = 1,        /* Skip deterministic stages?       */
            force_deterministic,       /* Force deterministic stages?      */
            use_splicing,              /* Recombine input files?           */
            dumb_mode,                 /* Run in non-instrumented mode?    */
            score_changed,             /* Scoring for favorites changed?   */
            kill_signal,               /* Signal that killed the child     */
+           abort_mode,                /* HEAP: Abort mode */
            resuming_fuzz,             /* Resuming an older fuzzing job?   */
            timeout_given,             /* Specific timeout given?          */
            not_on_tty,                /* stdout is not a tty              */
@@ -402,6 +410,7 @@ static void bind_to_free_cpu(void) {
 
   u8 cpu_used[4096] = { 0 };
   u32 i;
+  char* proc_dir;
 
   if (cpu_core_count < 2) return;
 
@@ -412,7 +421,13 @@ static void bind_to_free_cpu(void) {
 
   }
 
-  d = opendir("/proc");
+  proc_dir = "/host/proc";
+  d = opendir(proc_dir);
+  if (!d) {
+    WARNF("Unable to access /host/proc - not running in the docker");
+    proc_dir = "/proc";
+    d = opendir(proc_dir);
+  }
 
   if (!d) {
 
@@ -442,7 +457,7 @@ static void bind_to_free_cpu(void) {
 
     if (!isdigit(de->d_name[0])) continue;
 
-    fn = alloc_printf("/proc/%s/status", de->d_name);
+    fn = alloc_printf("%s/%s/status", proc_dir, de->d_name);
 
     if (!(f = fopen(fn, "r"))) {
       ck_free(fn);
@@ -2272,7 +2287,8 @@ static u8 run_target(char** argv, u32 timeout) {
      must prevent any earlier operations from venturing into that
      territory. */
 
-  memset(trace_bits, 0, MAP_SIZE);
+  if (confirm_mode == 0)
+    memset(trace_bits, 0, MAP_SIZE);
   MEM_BARRIER();
 
   /* If we're running in "dumb" mode, we can't rely on the fork server
@@ -2287,10 +2303,9 @@ static u8 run_target(char** argv, u32 timeout) {
     if (child_pid < 0) PFATAL("fork() failed");
 
     if (!child_pid) {
-
       struct rlimit r;
 
-      if (mem_limit) {
+      if (confirm_mode == 0 && mem_limit) {
 
         r.rlim_max = r.rlim_cur = ((rlim_t)mem_limit) << 20;
 
@@ -2312,9 +2327,12 @@ static u8 run_target(char** argv, u32 timeout) {
 
       /* Isolate the process and configure standard descriptors. If out_file is
          specified, stdin is /dev/null; otherwise, out_fd is cloned instead. */
-
       setsid();
 
+      if (confirm_mode == 1) {
+        unsetenv(SHM_ENV_VAR);
+      }
+
       dup2(dev_null_fd, 1);
       dup2(dev_null_fd, 2);
 
@@ -2441,8 +2459,10 @@ static u8 run_target(char** argv, u32 timeout) {
 
     if (child_timed_out && kill_signal == SIGKILL) return FAULT_TMOUT;
 
+    // HEAP: CRASH ONLY WHEN EXPLOIT IS DETECTED
+    if (kill_signal != (abort_mode ? SIGABRT : SIGUSR2))
+      return FAULT_NONE;
     return FAULT_CRASH;
-
   }
 
   /* A somewhat nasty hack for MSAN, which doesn't support abort_on_error and
@@ -3241,10 +3261,25 @@ keep_as_crash:
          except for slightly different limits and no need to re-run test
          cases. */
 
-      total_crashes++;
-
       if (unique_crashes >= KEEP_UNIQUE_CRASH) return keeping;
 
+      u8 new_fault = FAULT_NONE;
+
+      for (int i = 0; i < CONFIRM_NUM; i++) {
+        dumb_mode = 1;
+        confirm_mode = 1;
+
+        new_fault = run_target(argv, exec_tmout);
+
+        dumb_mode = 0;
+        confirm_mode = 0;
+
+        if (new_fault != FAULT_CRASH)
+          return keeping;
+      }
+
+      total_crashes++;
+
       if (!dumb_mode) {
 
 #ifdef __x86_64__
@@ -3253,8 +3288,8 @@ keep_as_crash:
         simplify_trace((u32*)trace_bits);
 #endif /* ^__x86_64__ */
 
-        if (!has_new_bits(virgin_crash)) return keeping;
 
+        if (!has_new_bits(virgin_crash)) return keeping;
       }
 
       if (!unique_crashes) write_crash_readme();
@@ -6093,174 +6128,10 @@ havoc_stage:
  
     for (i = 0; i < use_stacking; i++) {
 
-      switch (UR(15 + ((extras_cnt + a_extras_cnt) ? 2 : 0))) {
+      switch (UR(5)) {
 
         case 0:
 
-          /* Flip a single bit somewhere. Spooky! */
-
-          FLIP_BIT(out_buf, UR(temp_len << 3));
-          break;
-
-        case 1: 
-
-          /* Set byte to interesting value. */
-
-          out_buf[UR(temp_len)] = interesting_8[UR(sizeof(interesting_8))];
-          break;
-
-        case 2:
-
-          /* Set word to interesting value, randomly choosing endian. */
-
-          if (temp_len < 2) break;
-
-          if (UR(2)) {
-
-            *(u16*)(out_buf + UR(temp_len - 1)) =
-              interesting_16[UR(sizeof(interesting_16) >> 1)];
-
-          } else {
-
-            *(u16*)(out_buf + UR(temp_len - 1)) = SWAP16(
-              interesting_16[UR(sizeof(interesting_16) >> 1)]);
-
-          }
-
-          break;
-
-        case 3:
-
-          /* Set dword to interesting value, randomly choosing endian. */
-
-          if (temp_len < 4) break;
-
-          if (UR(2)) {
-  
-            *(u32*)(out_buf + UR(temp_len - 3)) =
-              interesting_32[UR(sizeof(interesting_32) >> 2)];
-
-          } else {
-
-            *(u32*)(out_buf + UR(temp_len - 3)) = SWAP32(
-              interesting_32[UR(sizeof(interesting_32) >> 2)]);
-
-          }
-
-          break;
-
-        case 4:
-
-          /* Randomly subtract from byte. */
-
-          out_buf[UR(temp_len)] -= 1 + UR(ARITH_MAX);
-          break;
-
-        case 5:
-
-          /* Randomly add to byte. */
-
-          out_buf[UR(temp_len)] += 1 + UR(ARITH_MAX);
-          break;
-
-        case 6:
-
-          /* Randomly subtract from word, random endian. */
-
-          if (temp_len < 2) break;
-
-          if (UR(2)) {
-
-            u32 pos = UR(temp_len - 1);
-
-            *(u16*)(out_buf + pos) -= 1 + UR(ARITH_MAX);
-
-          } else {
-
-            u32 pos = UR(temp_len - 1);
-            u16 num = 1 + UR(ARITH_MAX);
-
-            *(u16*)(out_buf + pos) =
-              SWAP16(SWAP16(*(u16*)(out_buf + pos)) - num);
-
-          }
-
-          break;
-
-        case 7:
-
-          /* Randomly add to word, random endian. */
-
-          if (temp_len < 2) break;
-
-          if (UR(2)) {
-
-            u32 pos = UR(temp_len - 1);
-
-            *(u16*)(out_buf + pos) += 1 + UR(ARITH_MAX);
-
-          } else {
-
-            u32 pos = UR(temp_len - 1);
-            u16 num = 1 + UR(ARITH_MAX);
-
-            *(u16*)(out_buf + pos) =
-              SWAP16(SWAP16(*(u16*)(out_buf + pos)) + num);
-
-          }
-
-          break;
-
-        case 8:
-
-          /* Randomly subtract from dword, random endian. */
-
-          if (temp_len < 4) break;
-
-          if (UR(2)) {
-
-            u32 pos = UR(temp_len - 3);
-
-            *(u32*)(out_buf + pos) -= 1 + UR(ARITH_MAX);
-
-          } else {
-
-            u32 pos = UR(temp_len - 3);
-            u32 num = 1 + UR(ARITH_MAX);
-
-            *(u32*)(out_buf + pos) =
-              SWAP32(SWAP32(*(u32*)(out_buf + pos)) - num);
-
-          }
-
-          break;
-
-        case 9:
-
-          /* Randomly add to dword, random endian. */
-
-          if (temp_len < 4) break;
-
-          if (UR(2)) {
-
-            u32 pos = UR(temp_len - 3);
-
-            *(u32*)(out_buf + pos) += 1 + UR(ARITH_MAX);
-
-          } else {
-
-            u32 pos = UR(temp_len - 3);
-            u32 num = 1 + UR(ARITH_MAX);
-
-            *(u32*)(out_buf + pos) =
-              SWAP32(SWAP32(*(u32*)(out_buf + pos)) + num);
-
-          }
-
-          break;
-
-        case 10:
-
           /* Just set a random byte to a random value. Because,
              why not. We use XOR with 1-255 to eliminate the
              possibility of a no-op. */
@@ -6268,7 +6139,7 @@ havoc_stage:
           out_buf[UR(temp_len)] ^= 1 + UR(255);
           break;
 
-        case 11 ... 12: {
+        case 1 ... 2: {
 
             /* Delete bytes. We're making this a bit more likely
                than insertion (the next option) in hopes of keeping
@@ -6293,7 +6164,7 @@ havoc_stage:
 
           }
 
-        case 13:
+        case 3:
 
           if (temp_len + HAVOC_BLK_XL < MAX_FILE) {
 
@@ -6327,9 +6198,11 @@ havoc_stage:
 
             if (actually_clone)
               memcpy(new_buf + clone_to, out_buf + clone_from, clone_len);
-            else
-              memset(new_buf + clone_to,
-                     UR(2) ? UR(256) : out_buf[UR(temp_len)], clone_len);
+            else {
+              u32 i;
+              for (i = 0; i < clone_len; i++)
+                *(new_buf + clone_to + i) = UR(256);
+            }
 
             /* Tail */
             memcpy(new_buf + clone_to + clone_len, out_buf + clone_to,
@@ -6343,7 +6216,7 @@ havoc_stage:
 
           break;
 
-        case 14: {
+        case 4: {
 
             /* Overwrite bytes with a randomly selected chunk (75%) or fixed
                bytes (25%). */
@@ -6362,105 +6235,16 @@ havoc_stage:
               if (copy_from != copy_to)
                 memmove(out_buf + copy_to, out_buf + copy_from, copy_len);
 
-            } else memset(out_buf + copy_to,
-                          UR(2) ? UR(256) : out_buf[UR(temp_len)], copy_len);
-
-            break;
-
-          }
-
-        /* Values 15 and 16 can be selected only if there are any extras
-           present in the dictionaries. */
-
-        case 15: {
-
-            /* Overwrite bytes with an extra. */
-
-            if (!extras_cnt || (a_extras_cnt && UR(2))) {
-
-              /* No user-specified extras or odds in our favor. Let's use an
-                 auto-detected one. */
-
-              u32 use_extra = UR(a_extras_cnt);
-              u32 extra_len = a_extras[use_extra].len;
-              u32 insert_at;
-
-              if (extra_len > temp_len) break;
-
-              insert_at = UR(temp_len - extra_len + 1);
-              memcpy(out_buf + insert_at, a_extras[use_extra].data, extra_len);
-
-            } else {
-
-              /* No auto extras or odds in our favor. Use the dictionary. */
-
-              u32 use_extra = UR(extras_cnt);
-              u32 extra_len = extras[use_extra].len;
-              u32 insert_at;
-
-              if (extra_len > temp_len) break;
-
-              insert_at = UR(temp_len - extra_len + 1);
-              memcpy(out_buf + insert_at, extras[use_extra].data, extra_len);
-
+            } else  {
+              u32 i;
+              for (i = 0; i < copy_len; i++)
+                *(out_buf + copy_to + i) = UR(256);
             }
 
             break;
 
           }
 
-        case 16: {
-
-            u32 use_extra, extra_len, insert_at = UR(temp_len + 1);
-            u8* new_buf;
-
-            /* Insert an extra. Do the same dice-rolling stuff as for the
-               previous case. */
-
-            if (!extras_cnt || (a_extras_cnt && UR(2))) {
-
-              use_extra = UR(a_extras_cnt);
-              extra_len = a_extras[use_extra].len;
-
-              if (temp_len + extra_len >= MAX_FILE) break;
-
-              new_buf = ck_alloc_nozero(temp_len + extra_len);
-
-              /* Head */
-              memcpy(new_buf, out_buf, insert_at);
-
-              /* Inserted part */
-              memcpy(new_buf + insert_at, a_extras[use_extra].data, extra_len);
-
-            } else {
-
-              use_extra = UR(extras_cnt);
-              extra_len = extras[use_extra].len;
-
-              if (temp_len + extra_len >= MAX_FILE) break;
-
-              new_buf = ck_alloc_nozero(temp_len + extra_len);
-
-              /* Head */
-              memcpy(new_buf, out_buf, insert_at);
-
-              /* Inserted part */
-              memcpy(new_buf + insert_at, extras[use_extra].data, extra_len);
-
-            }
-
-            /* Tail */
-            memcpy(new_buf + insert_at + extra_len, out_buf + insert_at,
-                   temp_len - insert_at);
-
-            ck_free(out_buf);
-            out_buf   = new_buf;
-            temp_len += extra_len;
-
-            break;
-
-          }
-
       }
 
     }
@@ -6765,8 +6549,8 @@ static void handle_stop_sig(int sig) {
 
   stop_soon = 1; 
 
-  if (child_pid > 0) kill(child_pid, SIGKILL);
-  if (forksrv_pid > 0) kill(forksrv_pid, SIGKILL);
+  if (child_pid > 0) kill(child_pid, SIGTERM /* SIGKILL */);
+  if (forksrv_pid > 0) kill(forksrv_pid, SIGTERM /* SIGKILL */);
 
 }
 
@@ -6786,12 +6570,12 @@ static void handle_timeout(int sig) {
   if (child_pid > 0) {
 
     child_timed_out = 1; 
-    kill(child_pid, SIGKILL);
+    kill(child_pid, SIGTERM /* SIGKILL */);
 
   } else if (child_pid == -1 && forksrv_pid > 0) {
 
     child_timed_out = 1; 
-    kill(forksrv_pid, SIGKILL);
+    kill(forksrv_pid, SIGTERM /* SIGKILL */);
 
   }
 
@@ -7066,6 +6850,7 @@ static void usage(u8* argv0) {
 
        "  -T text       - text banner to show on the screen\n"
        "  -M / -S id    - distributed mode (see parallel_fuzzing.txt)\n"
+       "  -a            - crash at abort\n"
        "  -C            - crash exploration mode (the peruvian rabbit thing)\n\n"
 
        "For additional tips, please consult %s/README.\n\n",
@@ -7678,18 +7463,27 @@ static void save_cmdline(u32 argc, char** argv) {
   u32 len = 1, i;
   u8* buf;
 
-  for (i = 0; i < argc; i++)
+  for (i = 0; i < argc; i++) {
     len += strlen(argv[i]) + 1;
+    if (strchr(argv[i], ' '))
+      len += 2;
+  }
   
   buf = orig_cmdline = ck_alloc(len);
 
   for (i = 0; i < argc; i++) {
 
     u32 l = strlen(argv[i]);
+    u8 has_space = strchr(argv[i], ' ') != NULL;
+    if (has_space)
+      *(buf++) = '"';
 
     memcpy(buf, argv[i], l);
     buf += l;
 
+    if (has_space)
+      *(buf++) = '"';
+
     if (i != argc - 1) *(buf++) = ' ';
 
   }
@@ -7723,7 +7517,7 @@ int main(int argc, char** argv) {
   gettimeofday(&tv, &tz);
   srandom(tv.tv_sec ^ tv.tv_usec ^ getpid());
 
-  while ((opt = getopt(argc, argv, "+i:o:f:m:t:T:dnCB:S:M:x:Q")) > 0)
+  while ((opt = getopt(argc, argv, "+i:o:f:m:t:T:dnCaB:S:M:x:Q")) > 0)
 
     switch (opt) {
 
@@ -7765,10 +7559,18 @@ int main(int argc, char** argv) {
 
         break;
 
+      case 'a': {
+        // HEAP: ABORT MODE
+        if (abort_mode) FATAL("Multiple -a options not supported");
+        abort_mode = 1;
+        break;
+      }
+
       case 'S': 
 
         if (sync_id) FATAL("Multiple -S or -M options not supported");
         sync_id = ck_strdup(optarg);
+        skip_deterministic = 0;
         break;
 
       case 'f': /* target file */
diff --git config.h config.h
index e74b3b3..5a11861 100644
--- config.h
+++ config.h
@@ -41,7 +41,7 @@
 /* Default timeout for fuzzed code (milliseconds). This is the upper bound,
    also used for detecting hangs; the actual value is auto-scaled: */
 
-#define EXEC_TIMEOUT        1000
+#define EXEC_TIMEOUT        10000
 
 /* Timeout rounding factor when auto-scaling (milliseconds): */
 
